generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Vessel {
  id             String     @id @default(uuid())
  name           String
  totalCargoLoad Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
  project        Projects[]
}

model LoadingReport {
  id           String    @id @default(uuid())
  activity     String?
  activityFrom DateTime
  activityTo   DateTime
  hourMins     String
  totalHours   Float     @default(0)
  days         Float     @default(0)
  exclude       Boolean @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  vesselId     String
  projectId    String
}

model Projects {
  id               String        @id @default(uuid())
  laytimeDays      Float         @default(0)
  totalCargo       Int           @default(0)
  cargoRate        Int           @default(0)
  projectStartDate DateTime?
  projectEndDate   DateTime?
  monitored        Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime?     @updatedAt
  vesselId         String
  vesselName       String?
  vessel           Vessel        @relation(fields: [vesselId], references: [id])
  lcts             LctProjects[]
  lctTrips         LctTrips[]
}

model Lct {
  id            String        @id @default(uuid())
  name          String
  cargoCapacity Int
  projectId     String?
  project       LctProjects[]
  trips         LctTrips[]
}

model LctProjects {
  id        String   @id @default(uuid())
  projectId String
  lctId     String
  lctName   String?
  project   Projects @relation(fields: [projectId], references: [id])
  lct       Lct      @relation(fields: [lctId], references: [id])
}

model LctTrips {
  id           String    @id @default(uuid())
  cargoLoad    Int       @default(0)
  tripToVessel String
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  lctId        String
  lct          Lct       @relation(fields: [lctId], references: [id])
  projectId    String
  projects     Projects  @relation(fields: [projectId], references: [id])
}

view Analytics {
  id                     String   @id @unique @default(uuid()) @db.VarChar(36)
  vesselName             String
  projectId              String?
  monitored              Boolean? @default(false)
  totalCargo             Int?     @default(0)
  laytime                Decimal? @db.Decimal(13, 2)
  layTimeAsOf            Float?
  layTimeConsumed        Float?
  totalLoadedCargo       Decimal? @db.Decimal(32, 0)
  estTotalTimeFinish     Float?
  estDespatch            Float?
  estTimeToFinishLoading Float?
  totalCargoToBeLoaded   Decimal? @db.Decimal(33, 0)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}